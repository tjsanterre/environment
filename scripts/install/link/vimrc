" .vimrc


" Map leaders before anything else so all mappings pick up new leader.
let mapleader = ","
let localleader = ","

""" General Options
set nocompatible " use Vim defaults and not Vi, required for Vundle
set nobackup " don't create a backup when editing
set history=25 " number of lines of command-line history:


""" Vundle Configuration
filetype off " required for Vundle
set rtp+=~/.vim/bundle/vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
"Plugin 'taglist.vim'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'myusuf3/numbers.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'rust-lang/rust.vim'
Plugin 'fatih/vim-go'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'wesQ3/vim-windowswap'
Plugin 'rhysd/vim-clang-format'
Plugin 'morhetz/gruvbox'
Plugin 'bling/vim-airline'

" All plugins managed by Vundle need to be declared before this line.
call vundle#end()
filetype plugin indent on


""" Backspace Options
set backspace=indent,eol,start " enable more powerful backspace
fixdel " fix delete key


""" Indenting Options
set autoindent " copy indent from current line when starting a new line
set smartindent " for new lines
set expandtab    " replace tabs with spaces
set shiftwidth=4
set softtabstop=4
set tabstop=4


""" Basic Visual Options
set background=dark
let g:gruvbox_bold = 0
let g:gruvbox_contrast_dark = 'soft'
colorscheme gruvbox
set gcr=a:blinkwait0,a:block-cursor " use non-blinking block cursor
set lcs=tab:>-,trail:-,extends:>,precedes:< " show tabs, trailing space
set list     " turns on invisible characters
set nowrap   " don't make it look like there are line breaks when there aren't
set number   " show line numbers
set numberwidth=3 " setup to show three digit line numbers
set ruler    " show current row and column at the bottom right of the screen
set showcmd  " show partially-typed commands
set showmode " display the current mode
set wildmenu " enable tab completion
set wildmode=list:longest,full
set wildignore+=*.so,*.swp,*.zip,*.png,*.jpg,*.exe,*.a,*.o


""" Status Line
set laststatus=2 " always show status line
set statusline+=%{fugitive#statusline()}


""" Spell Check
" use 'z=' to get list of suggestions
" use 'zg' to add a word to the dictionary
set spell spelllang=en_us

" Map Leader,S to toggle spell checking
:map <Leader>S :setlocal spell! spelllang=en_us<CR>



""" GVIM Specific Options
if has('gui_running')
    set guifont=Monospace\ 11
    set guioptions-=T " don't show toolbar
endif


""" Mouse Options
set mouse=a  " enable the mouse
set mousehide " hide mouse when typing


""" Search/Replace Options
set hlsearch   " enable incremental highlight
set incsearch  " enable incremental search
set ignorecase " search case-insensitive
set smartcase  " search case-sensitive if search contains upper-case letter
" turn of search highlighting by pressing the space bar after a search
:noremap <silent> <Space> :silent noh<Bar>echo<CR>


""" Key Maps

" move between buffer windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" move between tabs
map <C-Left> :tabprevious <CR>
map <C-Right> :tabnext <CR>
map <Leader>j :tabprevious <CR>
map <Leader>l :tabnext<CR>

" user <Leader>e to edit a file relative to the current buffer
map <Leader>ee :e <C-R>=expand("%:h") . "/" <CR>
map <Leader>eE :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>et :tabe <C-R>=expand("%:h") . "/" <CR>
map <Leader>eT :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>es :split <C-R>=expand("%:h") . "/" <CR>
map <Leader>eS :split <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>el :vsplit <C-R>=expand("%:h") . "/" <CR>
map <Leader>eL :vsplit <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>er :vsplit <CR> <bar> <C-l> <CR> <bar> :e <C-R>=expand("%:h") . "/"  <CR>
map <Leader>eR :vsplit <CR> <bar> <C-l> <CR> <bar> :e <C-R>=expand("%:p:h") . "/"  <CR>

" use g+c to swap the current character with the next
:noremap <silent> gc xph
" use g+w to swap the current word with the next
:noremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>


""" Programming Specific (more or less)
syntax enable " enable  syntax highlighting
set foldmethod=syntax
set foldcolumn=1
set comments+=b:\" " treat lines starting with '"' as comments
set showmatch      " briefly jump to matching brace/paren/bracket
set omnifunc=syntaxcomplete#Complete

" set syntax for unrecognized files
autocmd BufNewFile,BufRead sconstruct set filetype=python
autocmd BufNewFile,BufRead SConstruct set filetype=python
autocmd BufNewFile,BufRead sconscript set filetype=python
autocmd BufNewFile,BufRead SConscript set filetype=python

" don't indent inside a namespace
"set cino=N-s

" function to insert ifdef block
function! AddIfDef(name)
    execute "normal I#ifdef " . a:name
    normal 2o
    execute "normal o#endif // " . a:name
endfunction
com -nargs=1 Ifdef call AddIfDef(<f-args>)

" function to insert C++ ifdef header blocks
function! AddHeaderIfDef()
    let filename = system("basename " . bufname('') . " | sed 's/\\./_/g'")
    let filename = toupper(filename)
    execute "normal I#ifndef " . filename . "#define " . filename
    normal 2o
    execute "normal o#endif"
    normal 2k
endfunction
map <F2> :call AddHeaderIfDef()<CR>

" function to expand tabs to spaces
map <F3> :%s/\t/    /g<CR>

" function to condense spaces to tabs
map <F4> :%s/    /\t/g<CR>


""" Tags/Taglist Configuraiton
" looks in current directory, then up to root for tags file
set tags=./tags;

" open tag definition in a new tab (ctrl + \)
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" open tag definition in a new vertical split (alt + \)
map <A-\> :sp <CR>:exec("tag ".expand("<cword>"))<CR>

" set where to look for tags
set complete-=i

" toggle taglist
:noremap <silent> <F5> :TlistToggle<CR>
let Tlist_WinWidth = 35


""" NERDTree Configuration
" toggle tree
:noremap <silent> <F6> :NERDTreeToggle<CR>

let NERDTreeIgnore=['\~$', '\.[o|d]$[[file]]']


""" Fugitive Configuration
" force diffs to always split vertically
set diffopt+=vertical


""" Clang Format Configuration
" run clang format
nnoremap <Leader>f :ClangFormat<CR>
vnoremap <Leader>f :ClangFormat<CR>

" detect format file
let g:clang_format#detect_style_file = 1


""" YouCompleteMe Configuration
"let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_add_preview_to_completeopt = 1
"let g:ycm_autoclose_preview_window_after_completion = 1


""" CtrlP Configuration
let g:ctrlp_working_path_mode = 'rw'

" add custom command
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others && git submodule foreach --recursive git ls-files'],
    \ },
\ }

" add files and directories to ignore
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/](\.git|\.hg|\.svn|build|release)$',
    \ 'file': '\v\.(exe|so|a|o|swp|gz|zip|bz2|vcproj|sln|pkg)$',
    \ }


" don't limit the number of indexed files
let g:ctrlp_max_files = 0

" open ctrlp from source control root directory (.git/.svn/.hg)
map <Leader>p :CtrlP <CR>
" open ctrlp for current directory
map <Leader>P :CtrlP . <CR>


""" You Complete Me Configuration
"let g:ycm_collect_identifiers_from_tags_files = 1

